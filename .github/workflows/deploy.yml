name: Deploy to Hetzner
on:
  push:
    tags:
      - 'v*'

env:
  REGISTRY: docker.io
  IMAGE_NAME: scarlettai/go-api
  API_HOST: api.scarlett.ai

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=tag
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            API_HOST=${{ env.API_HOST }}
            GROQ_API_KEY=${{ secrets.GROQ_API_KEY }}

      - name: Deploy to Hetzner
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.HETZNER_HOST }}
          username: root
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd /root/scarlett
            export GROQ_API_KEY=${{ secrets.GROQ_API_KEY }}
            
            # Pull the new API image first
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$(echo ${{ github.ref_name }} | sed 's/v//')
            
            # Stop and remove only the API container
            docker-compose stop api
            docker-compose rm -f api
            
            # Start the API container
            docker-compose up -d api
            
            # Only restart Grafana if there are dashboard or configuration changes
            if git diff --name-only HEAD HEAD^ | grep -q "grafana/"; then
              echo "Grafana changes detected, updating Grafana..."
              docker-compose stop grafana
              docker-compose rm -f grafana
              docker-compose up -d grafana
            fi
            
            # Verify services are running
            docker-compose ps

      - name: Setup Prometheus Backup System
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.HETZNER_HOST }}
          username: root
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # Create necessary directories if they don't exist
            mkdir -p /root/backups/prometheus
            
            # Create or preserve log file
            if [ ! -f /var/log/prometheus-backup.log ]; then
              touch /var/log/prometheus-backup.log
              chmod 644 /var/log/prometheus-backup.log
            fi
            
            # Backup existing scripts before updating
            if [ -f /root/backup-prometheus.sh ]; then
              cp /root/backup-prometheus.sh /root/backup-prometheus.sh.bak
            fi
            if [ -f /root/restore-prometheus.sh ]; then
              cp /root/restore-prometheus.sh /root/restore-prometheus.sh.bak
            fi
            
            # Copy new backup and restore scripts
            cd /root/scarlett
            cp prometheus/scripts/backup.sh /root/backup-prometheus.sh
            cp prometheus/scripts/restore.sh /root/restore-prometheus.sh
            chmod +x /root/backup-prometheus.sh /root/restore-prometheus.sh
            
            # Setup cron job for daily backups at 2 AM (only if not already set)
            if ! (crontab -l 2>/dev/null | grep -q "backup-prometheus.sh"); then
              (crontab -l 2>/dev/null; echo "0 2 * * * /root/backup-prometheus.sh") | crontab -
              echo "$(date): Prometheus backup cron job installed" >> /var/log/prometheus-backup.log
            fi
            
            # Log the update
            echo "$(date): Prometheus backup scripts updated during deployment" >> /var/log/prometheus-backup.log 